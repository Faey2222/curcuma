.#{$ui-name-buttons} {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;

  &:last-child {
    margin-bottom: calc(#{var(--ui-button-margin-bottom)} * -1);
  }

  &:not(:last-child) {
    margin-bottom: calc(var(--ui-gutter) / 2);
  }

  &.is-centered {
    justify-content: center;
  }

  &.is-right {
    justify-content: flex-end;
  }

  &.has-addons {
    .#{$ui-name-button} {
      margin-right: 0;

      &:not(:first-child):not(:last-child) {
        border-radius: 0;
        border-right: 0;
      }

      &:first-child:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: 0;
      }

      &:last-child:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }

  .#{$ui-name-button}:not(.is-fullwidth) {
    margin-right: var(--ui-button-margin-right);

    &:last-child {
      margin-right: 0;
    }
  }
}

.#{$ui-name-button} {
  padding: var(--ui-button-padding-y) var(--ui-button-padding-x);
  border-radius: var(--ui-radius);
  background-color: transparent;
  border: rem(1px) solid var(--ui-gray-lighter);
  color: var(--ui-color);
  margin-bottom: var(--ui-button-margin-bottom);
  cursor: pointer;
  user-select: none;
  position: relative;

  @if $ui-setting-use-transition == true {
    transition: var(--ui-transition);
  }

  &:hover,
  &.is-hovered {
    border-color: var(--ui-gray-light);
  }

  &:active,
  &.is-active {
    border-color: var(--ui-gray-light);
  }

  &:focus,
  &.is-focused {
    outline: none;
    box-shadow: 0 0 0 var(--ui-button-focus-width) var(--ui-gray-low-opacity);
  }

  &[disabled] {
    cursor: not-allowed;
    opacity: $ui-low-opacity;
  }

  &.is-fullwidth {
    width: 100%;
  }

  &.is-loading {
    color: transparent !important;
    pointer-events: none;

    &:after {
      position: absolute !important;
      top: calc(50% - 0.5rem);
      left: calc(50% - 0.5rem);
      content: '';
      animation: spin 0.5s infinite linear;
      border: rem(2px) solid var(--ui-color);
      border-radius: 50%;
      border-right-color: transparent;
      border-top-color: transparent;
      width: 1rem;
      height: 1rem;
    }
  }

  &.is-rounded {
    border-radius: var(--ui-button-rounded-radius);
  }

  &.is-#{$ui-named-size-small},
  .#{$ui-name-buttons}.are-small & {
    font-size: var(--ui-button-small-font-size);
    padding: var(--ui-button-small-padding-y) var(--ui-button-small-padding-x);

    &.is-rounded {
      border-radius: var(--ui-button-small-rounded-radius);
    }

    &.is-loading {
      &:after {
        top: calc(50% - 0.375rem);
        left: calc(50% - 0.375rem);
        width: 0.75rem;
        height: 0.75rem;
      }
    }

    .#{$ui-name-icon} {
      &:first-child:last-child {
        margin-left: calc(var(--ui-button-small-padding-x) * -1);
        margin-right: calc(var(--ui-button-small-padding-x) * -1);
        margin-top: calc(var(--ui-button-small-padding-y) * -1);
        margin-bottom: calc(var(--ui-button-small-padding-y) * -1);
        width: calc(var(--ui-base-size) + (var(--ui-button-small-padding-y) * 2) - #{rem(2px)});
      }
    }
  }

  &.is-#{$ui-named-size-large},
  .#{$ui-name-buttons}.are-large & {
    font-size: var(--ui-button-large-font-size);
    padding: var(--ui-button-large-padding-y) var(--ui-button-large-padding-x);

    &.is-rounded {
      border-radius: var(--ui-button-large-rounded-radius);
    }

    &.is-loading {
      &:after {
        top: calc(50% - 0.75rem);
        left: calc(50% - 0.75rem);
        width: 1.5rem;
        height: 1.5rem;
      }
    }

    .#{$ui-name-icon} {
      &:first-child:last-child {
        margin-left: calc(var(--ui-button-large-padding-x) * -1);
        margin-right: calc(var(--ui-button-large-padding-x) * -1);
        margin-top: calc(var(--ui-button-large-padding-y) * -1);
        margin-bottom: calc(var(--ui-button-large-padding-y) * -1);
        width: calc(var(--ui-base-size) + (var(--ui-button-large-padding-y) * 2) + #{rem(7px)});
      }
    }
  }

  .#{$ui-name-icon} {
    &:first-child:not(:last-child) {
      margin-right: var(--ui-icon-spacer);
    }

    &:last-child:not(:first-child) {
      margin-left: var(--ui-icon-spacer);
    }

    &:first-child:last-child {
      margin-left: calc(var(--ui-button-padding-x) * -1);
      margin-right: calc(var(--ui-button-padding-x) * -1);
      margin-top: calc(var(--ui-button-padding-y) * -1);
      margin-bottom: calc(var(--ui-button-padding-y) * -1);
      width: calc(var(--ui-base-size) + (var(--ui-button-padding-y) * 2) + #{rem(2px)});
    }
  }

  $color-types: $ui-colors $ui-shades;
  @each $color-type in $color-types {
    @each $variation in $color-type {
      $key: nth(map-keys($color-type), index($color-type, $variation));
      $val: map-get(map-get($color-type, $key), name);
      $var: map-get(map-get($color-type, $key), var);
      $state: map-get(map-get($color-type, $key), state-name);
      $active-state: map-get(map-get($color-type, $key), active-state-name);

      &--#{$key},
      &.is-#{$key} {
        border-color: var(--#{$val});
        background-color: var(--#{$val});
        color: find-color($var);

        &:hover,
        &.is-hovered {
          border-color: var(--#{$state});
          background-color: var(--#{$state});
          color: find-color($var);
        }

        &:active,
        &.is-active {
          border-color: var(--#{$active-state});
          background-color: var(--#{$active-state});
          color: find-color($var);
        }

        &:focus,
        &.is-focused {
          outline: none;
          @if $color-type == $ui-shades {
            box-shadow: 0 0 0 var(--ui-button-focus-width) var(--ui-gray-low-opacity);
          } @else {
            box-shadow: 0 0 0 var(--ui-button-focus-width) var(--#{$val}-low-opacity);
          }
        }

        @if $color-type == $ui-colors {
          &.has-gradient {
            border: 0;
            padding: calc(var(--ui-button-padding-y) + #{rem(1px)}) calc(var(--ui-button-padding-x) + #{rem(1px)});
            @if $ui-gradient == 'dark' {
              background-image: linear-gradient(to right, var(--#{$val}), var(--#{$val}-dark), var(--#{$val}-darker));
            } @else {
              background-image: linear-gradient(to right, var(--#{$val}), var(--#{$val}-light), var(--#{$val}-lighter));
            }
            background-size: 200%;

            &.is-small {
              padding: calc(var(--ui-button-small-padding-y) + #{rem(1px)}) calc(var(--ui-button-small-padding-x) + #{rem(1px)});
            }

            &.is-large {
              padding: calc(var(--ui-button-large-padding-y) + #{rem(1px)}) calc(var(--ui-button-large-padding-x) + #{rem(1px)});
            }

            &:hover,
            &.is-hovered {
              background-position: 100%;
            }
          }
        }

        &.is-loading {
          &:after {
            border: 2px solid find-color($var);
            border-right-color: transparent;
            border-top-color: transparent;
          }
        }

        &.is-outlined {
          background-color: transparent;
          @if $val == 'ui-white' {
            color: var(--ui-body-color);
            border-color: var(--ui-gray-lighter);
          } @else {
            color: var(--#{$val});
            border-color: var(--#{$val});
          }

          &:hover,
          &.is-hovered {
            @if $val == 'ui-white' {
              border-color: var(--ui-primary-light);
              background-color: var(--#{$val});
              color: find-color($var);
            } @else {
              border-color: var(--#{$val});
              background-color: var(--#{$val});
              color: find-color($var);
            }
          }

          @if $val == 'ui-white' {
            &:focus,
            &.is-focused {
              box-shadow: 0 0 0 var(--ui-button-focus-width) var(--ui-primary-low-opacity);
            }
          }

          &:active,
          &.is-active {
            @if $val == 'ui-white' {
              border-color: var(--ui-primary);
              background-color: var(--#{$val});
              color: find-color($var);
            } @else {
              border-color: var(--#{$active-state});
              background-color: var(--#{$active-state});
              color: find-color($var);
            }
          }
        }

        &.is-inverted {
          @if $val == 'ui-white' {
            border-color: var(--ui-white);
            background-color: var(--ui-white);
            color: var(--ui-color);
          } @else {
            border-color: var(--ui-white);
            background-color: var(--ui-white);
            color: var(--#{$val});
          }

          &:hover,
          &.is-hovered {
            @if $val == 'ui-white' {
              border-color: var(--ui-primary-light);
              background-color: var(--#{$val});
              color: find-color($var);
            } @else {
              border-color: var(--#{$val});
              background-color: var(--#{$val});
              color: find-color($var);
            }
          }

          @if $val == 'ui-white' {
            &:focus,
            &.is-focused {
              box-shadow: 0 0 0 var(--ui-button-focus-width) var(--ui-primary-low-opacity);
            }
          }

          &:active,
          &.is-active {
            @if $val == 'ui-white' {
              background-color: var(--ui-white);
            } @else {
              background-color: var(--#{$active-state});
            }
            border-color: var(--#{$active-state});
            color: find-color($var);
          }

          &.is-outlined {
            background-color: transparent;
            border-color: var(--ui-white);
            color: var(--ui-white);

            &:hover,
            &.is-hovered {
              background-color: var(--#{$val});
              color: find-color($var);
              border-color: var(--#{$val});
            }
          }
        }
      }
    }
  }
}
